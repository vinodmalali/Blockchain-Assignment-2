// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

contract Election2022 {
    //defining structure with mutliple candidate variables
    struct Candidate{
        bool approved;
        address id;
        uint voteCount;
        string candidateName;
    }
    
    //Giving references using mapping
    mapping (address=>bool) public voters;

    mapping (uint=> Candidate)public candidates;

    address ecadmin;
    address ec;

    uint public candidatesCount;
    uint256 public startTime;
    uint256 public stopTime;


    constructor( address _admin) {
        ecadmin = _admin;
    }

    modifier ecOnly() {
        require(msg.sender == address(ec),"EC only operation");
        _;
    }

    modifier ecAdminOnly() {
        require(msg.sender == ecadmin,"EC admin only operation");
        _;
    }

    function setEC(address _ec) public ecAdminOnly {
        ec = _ec;
    }

    function addCandidate(string memory _name) public payable  {
        require(msg.value == 1 ether,"Appropraite ether not next");
        // is the candidate already registered.
        candidatesCount++;
        candidates[candidatesCount]=Candidate(false,msg.sender,0,_name);

        //(bool success, ) = payable(ec).call{value: msg.value}("");
        //bool success = payable(ec).send(msg.value);
        // payable(ec).transfer(msg.value);
       // require(success, "Failed to send Ether");
    }   

    function approveCandidiate(uint256 num) external ecOnly {
        require(candidates[num].id != address(0x00), "Not registered" );
        require(candidates[num].approved == false, "Already approved" );
        candidates[num].approved = true;
    }

    function setStart(uint256 num) external ecOnly {
        require(num > block.timestamp,"Start at later time" );
        startTime = num;
    }

    function setStop(uint256 num) external ecOnly {
        require(num > block.timestamp && num > startTime,"Stop at later time" );
        stopTime = num;
    }

    event consolePrint( string, address);

    function vote(uint _candidateId) public{
        require(block.timestamp > startTime,"Election not started" );
        require(block.timestamp <= stopTime,"Election over" );
        require(voters[msg.sender] == false, "Already voted");
        require(candidates[_candidateId].id != address(0x00), "Not registered condidate" );
        //require(candidates[_candidateId].approved == true, "Dont vote not approved" );
        assert(candidates[_candidateId].approved == true);

        emit consolePrint("value of sender is ",msg.sender);
        voters[msg.sender] == true;
        candidates[_candidateId].voteCount++;

    }

    function getResults() public view returns (string memory ) {
        require(block.timestamp >= stopTime,"Election yet to finish" );
        uint256 c;
        uint256 max=0;
        for( uint i =1; i<=candidatesCount; i++) {
            if ( candidates[i].voteCount > max ) {
                max = candidates[i].voteCount;
                c = i;
            }
        }

        return candidates[c].candidateName;
    }

    function close() public ecAdminOnly {
        selfdestruct(payable(msg.sender));
    }



}

pragma solidity ^0.8.7;

// interface Election {
//     function approveCandidiate(uint256 num) external;
//     function setStart(uint256 start) external;
//     function setStop(uint256 stop) external;
//     function getResults() external;
// }



contract ElectionCommision {

    address ele;

    Election2022 e = new Election2022(ele );

    event Log(string message);
    event LogBytes(bytes data);
    
    address public admin;

    //Election2022 public e;
    
    constructor() {
        admin = msg.sender;
    }

    modifier adminOnly() {
        require(msg.sender == admin,"No admin");
        _;
    }

    function approveCandidate(address election,uint256 id) public adminOnly {
       // Election e = Election(election);
       //Election2022 e = new  Election2022(election);
       Election2022(election);
        e.approveCandidiate(id);
    }

    function setStart(address election, uint256 time) public adminOnly {
       // Election e = Election(election);
       //Election2022 e = new Election2022(election);
       Election2022(election);
        e.setStart(time);
    }

    function setStop(address election,uint256 time) public adminOnly {
       // Election e = Election(election);
      // Election2022 e = new Election2022(election);
      Election2022(election);
        e.setStop(time);
    }

    function withdraw() public {
        uint amount = address(this).balance;

        (bool success, ) = admin.call{value: amount}("");
        require(success, "Failed to send Ether");
    }

    function trycathfunction(string memory _name) public  {
       //Election2022 e; //= new Election2022();
       
        try e.addCandidate(_name)   {
            emit Log("function called");
        } catch   {
            emit Log("external call failed");
        } catch Panic(uint reason) {
            // catch failing assert()
            emit LogBytes(abi.encode(reason));

        }


    }

    function trycatch2() public  {
       //Election2022 e; //= new Election2022();
       
        try e.getResults()  returns (string memory )   {
            emit Log("function called");
        } catch  Error(string memory reason)  {
            emit Log(reason);
        }
 }
}
